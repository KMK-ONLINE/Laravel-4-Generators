<?php

use Woodling\Woodling;

class {{className}} extends ControllerTest {

  use Codeception\Specify;

	public function testIndex() {
    $path = URL::action('{{className}}@index', [], false);

    $this->specify("it renders the view", function() use($path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{models}}');
    });
	}

	public function testCreate() {
    $path = URL::action('{{className}}@create', [], false);

    $this->specify("renders the view", function() use($path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      $this->assertContains('form', $response->getContent());
    });
	}

	public function testStore() {
    $path = URL::action('{{className}}@store', [], false);

    ${{model}}Mock = Mockery::mock('{{Model}}')->makePartial();
    App::instance('{{Model}}', ${{model}}Mock);

    $this->specify("when valid, it persists the {{model}} and redirects", function() use($path, ${{model}}Mock) {
      ${{model}}Mock->shouldReceive('save')->once()->andReturn(true);

      $response = $this->post($path, []);
		  $this->assertRedirectedToRoute('{{models}}.show');
    });

    $this->specify("when invalid, it flashes errors and redirects", function() use($path, ${{model}}Mock) {
      ${{model}}Mock->shouldReceive('save')->once()->andReturn(false);

      $response = $this->post($path, []);
      $this->assertRedirectedToRoute('{{models}}.create');
      $this->assertSessionHasErrors();
      $this->assertSessionHas('message');
    });
	}

	public function testShow() {
    ${{model}} = Woodling::saved('{{models}}');
    $path = URL::action('{{className}}@show', [ 'id' => ${{model}}->id ], false);

    $this->specify("renders the view", function() use($path, ${{model}}) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      // $this->assertContains({{model}}->name, $response->getContent());
    });
  }

	public function testEdit() {
    ${{model}} = Woodling::saved('{{models}}');
    $path = URL::action('{{className}}@edit', [ 'id' => ${{model}}->id ], false);

    $this->specify("renders the view", function() use(${{model}}, $path) {
      $response = $this->get($path);
      $this->assertResponseOk();
      $this->assertViewHas('{{model}}');
      $this->assertContains('form', $response->getContent());
    });
	}

	public function testUpdate() {
    ${{model}} = Woodling::saved('{{models}}');
    $path = URL::action('{{className}}@update', ['id' => ${{model}}->id ], false);

    ${{model}}Mock = Mockery::mock(${{model}})->makePartial();
    App::instance('{{models}}', ${{model}}Mock);

    $this->specify("when valid, it persists the {{model}} and redirects", function() use($path, ${{model}}Mock) {
      ${{model}}Mock->shouldReceive('save')->once()->andReturn(true);

      $response = $this->post($path, []);
		  $this->assertRedirectedToRoute('{{models}}.index');
    });

    $this->specify("when invalid, it flashes errors and redirects", function() use($path, ${{model}}Mock) {
      ${{model}}Mock->shouldReceive('save')->once()->andReturn(false);

      $response = $this->post($path, []);
      $this->assertRedirectedToRoute('{{models}}.create');
      $this->assertSessionHasErrors();
      $this->assertSessionHas('message');
    });
	}

	public function testDestroy() {
    ${{model}} = Woodling::saved('{{models}}');
    $path = URL::action('{{className}}@destroy', [ 'id' => ${{model}}->id ], false);

    ${{model}}Mock = Mockery::mock(${{model}})->makePartial();
    App::instance('{{models}}', ${{model}}Mock);

    $this->specify("calls delete on the {{model}}", function() use($path, ${{model}}Mock) {
      ${{model}}Mock->shouldReceive('delete')->once()->andReturn(true);

      $response = $this->delete($path);
      $this->assertRedirectedToRoute('{{models}}.create');
    });
	}

}
